{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      }).catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/silasUser/Documents/projects/codecademy_revenue_reactExample/ravenous-part-three-solution/src/registerServiceWorker.js"],"names":["register","process","env","NODE_ENV","navigator","window","addEventListener","swUrl","PUBLIC_URL","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","unregister","ready"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,eAAe,SAASA,QAAT,GAAoB;AACjC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,mBAAmBC,SAAhE,EAA2E;AACzEC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACpC,YAAMC,KAAK,aAAMN,OAAO,CAACC,GAAR,CAAYM,UAAlB,uBAAX;AACAJ,MAAAA,SAAS,CAACK,aAAV,CACGT,QADH,CACYO,KADZ,EAEGG,IAFH,CAEQC,YAAY,IAAI;AACpBA,QAAAA,YAAY,CAACC,aAAb,GAA6B,MAAM;AACjC,gBAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAtC;;AACAD,UAAAA,gBAAgB,CAACE,aAAjB,GAAiC,MAAM;AACrC,gBAAIF,gBAAgB,CAACG,KAAjB,KAA2B,WAA/B,EAA4C;AAC1C,kBAAIZ,SAAS,CAACK,aAAV,CAAwBQ,UAA5B,EAAwC;AACtC;AACA;AACA;AACA;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,eAND,MAMO;AACL;AACA;AACA;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD;AACF;AACF,WAfD;AAgBD,SAlBD;AAmBD,OAtBH,EAuBGC,KAvBH,CAuBSC,KAAK,IAAI;AACdH,QAAAA,OAAO,CAACG,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD,OAzBH;AA0BD,KA5BD;AA6BD;AACF;AAED,OAAO,SAASC,UAAT,GAAsB;AAC3B,MAAI,mBAAmBlB,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACK,aAAV,CAAwBc,KAAxB,CAA8Bb,IAA9B,CAAmCC,YAAY,IAAI;AACjDA,MAAAA,YAAY,CAACW,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}